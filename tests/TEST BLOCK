describe('Wallet v5 tests', () => {
    const myWalletAddress = 'UQDKb2nMq7FDjtN5NIJk2CNqJufnk1967LJlxlBpdLETDRWg';

    //  You win 100 Ton 💎 💰 Claim your present!! 🎁

    it('should be able to send message to my wallet address', async () => {
        const seqNo = await wallet.getSeqno();
        const msgValue = toNano(getRandomInt(1, 10));
        const randomBody = beginCell().storeUint(curTime(), 64).endCell();

        await assertSendMessages(
            0,
            walletId,
            curTime() + 1000,
            seqNo,
            [
                {
                    message: internal_relaxed({
                        to: Address.parse(myWalletAddress),
                        value: msgValue,
                        body: randomBody
                    }),
                    mode: SendMode.PAY_GAS_SEPARATELY
                }
            ],
            keys.secretKey
        );

        const seqnoAfter = BigInt(await wallet.getSeqno());
        expect(seqnoAfter).toEqual(seqNo + 1n);

        // Add additional script here if needed
    });

    // ... more test cases ...
});
